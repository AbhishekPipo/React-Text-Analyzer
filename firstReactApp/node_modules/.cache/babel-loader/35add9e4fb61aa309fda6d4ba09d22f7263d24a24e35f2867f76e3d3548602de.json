{"ast":null,"code":"var _jsxFileName = \"/home/abhishek/Documents/PaceWisdom/ReactProjects/harryProject/firstReactApp/src/components/TextForm.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\"; //usestate will help to make new state *variable* and *setstate fun*\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TextForm = props => {\n  _s();\n  //props is used to pass values fromm app.js to components\n  const handleUpClick = () => {\n    console.log(\"uppper case was clicked \" + text);\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n  const handleLoClick = () => {\n    console.log(\"lower case was clicked \" + text);\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n  const handleELPClick = () => {\n    console.log(\"Each Letter Uppercase Clicked\");\n    let newText = text.split(\"\").map(letter => letter.charAt.toUpperCase()).join(\"\");\n    setText(newText);\n  };\n  const handleOnChange = e => {\n    console.log(\"on changed clicked\");\n    setText(e.target.value); //on change text was the value of text area, which is here set to text means we are updating  the text comes from textarea value\n  };\n\n  const countA = () => {\n    const count = (text.match(/a/gi) || []).length;\n    return count;\n  };\n  const [text, setText] = useState(\"\"); //text is a variable, set text is a function used to update texxt variable, in react you cant update variable directly you have to use function  to update varible\n  const aCount = countA(); // it has to be called here \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          onChange: handleOnChange,\n          id: \"myBox\",\n          value: text,\n          rows: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary \",\n        onClick: handleUpClick,\n        children: \"Convert To UpperCase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-3\",\n        onClick: handleLoClick,\n        children: \"Convert To LowerCase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-3\",\n        onClick: handleELPClick,\n        children: \"Convert To EachLetterToUpper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", text.split(\" \").length, \" \", \" \", \"Words, \", text.length, \" \", \" \", \"Charecters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", .008 * text.split(\" \").length, \" Minutes To Read \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", text, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of a's in \", text, \" is: \", aCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TextForm, \"3t0DFnMi16eB/7p7iIKtjG5r68g=\");\n_c = TextForm;\nexport default TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TextForm","props","_s","handleUpClick","console","log","text","newText","toUpperCase","setText","handleLoClick","toLowerCase","handleELPClick","split","map","letter","charAt","join","handleOnChange","e","target","value","countA","count","match","length","aCount","children","className","heading","fileName","_jsxFileName","lineNumber","columnNumber","onChange","id","rows","onClick","_c","$RefreshReg$"],"sources":["/home/abhishek/Documents/PaceWisdom/ReactProjects/harryProject/firstReactApp/src/components/TextForm.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\"; //usestate will help to make new state *variable* and *setstate fun*\n\nconst TextForm = (props) => {\n  //props is used to pass values fromm app.js to components\n  const handleUpClick = () => {\n    console.log(\"uppper case was clicked \" + text);\n\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n\n  const handleLoClick = () => {\n    console.log(\"lower case was clicked \" + text);\n\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n  const handleELPClick = () => {\n    console.log(\"Each Letter Uppercase Clicked\");\n    let newText = text.split(\"\").map((letter) => letter.charAt.toUpperCase()).join(\"\");\n    setText(newText);\n  };\n  \n  \n\n  const handleOnChange = (e) => {\n    console.log(\"on changed clicked\");\n    setText(e.target.value); //on change text was the value of text area, which is here set to text means we are updating  the text comes from textarea value\n  };\n   const countA = () => {\n    const count = (text.match(/a/gi) || []).length;\n    return count;\n  };\n\n  const [text, setText] = useState(\"\"); //text is a variable, set text is a function used to update texxt variable, in react you cant update variable directly you have to use function  to update varible\n  const aCount = countA(); // it has to be called here \n  return (\n    <>\n      <div className=\"container\">\n        <h1>{props.heading}</h1>\n        <div className=\"form-group\">\n          {/* on change will help us to enter text dynamically */}\n          <textarea\n            className=\"form-control\"\n            onChange={handleOnChange}\n            id=\"myBox\"\n            value={text}\n            rows=\"10\"\n          ></textarea>\n        </div>\n        {/* onclick the text value gathered from onchange funtion will be converted to uppercase using newText varible and that newtext varible set to the text variable */}\n        <button className=\"btn btn-primary \" onClick={handleUpClick}>\n          Convert To UpperCase\n        </button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>\n          Convert To LowerCase\n        </button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleELPClick}>\n          Convert To EachLetterToUpper\n        </button>\n      </div>\n      <div className=\"container my-2\">\n        <h2>Your Text Summary</h2>\n        <p>\n          {\" \"}\n          {text.split(\" \").length}{\" \"}\n          {/* split(\" \") splits string which end with blanck space and *add them seperately in an array .length  will help us to  find the length of the array which is actual number of words in entered text*  */}{\" \"}\n          Words, {text.length}{\" \"}\n          {/* To find the number of charecters we use * text.lenth here */}{\" \"}\n          Charecters\n        </p>\n        <p> {.008 * text.split(\" \").length } Minutes To Read </p>\n        <h2>Preview</h2>\n        <p> {text} </p>\n        <p>Number of a's in {text} is: {aCount}</p>\n      </div>\n    </>\n  );\n};\n\nexport default TextForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}